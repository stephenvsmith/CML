// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sampleCML
List sampleCML(NumericMatrix true_dag, arma::mat df, NumericVector targets, NumericVector nodes_interest, StringVector names, int lmax, double signif_level, bool verbose, std::string test, bool estDAG);
RcppExport SEXP _CML_sampleCML(SEXP true_dagSEXP, SEXP dfSEXP, SEXP targetsSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP lmaxSEXP, SEXP signif_levelSEXP, SEXP verboseSEXP, SEXP testSEXP, SEXP estDAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< double >::type signif_level(signif_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string >::type test(testSEXP);
    Rcpp::traits::input_parameter< bool >::type estDAG(estDAGSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleCML(true_dag, df, targets, nodes_interest, names, lmax, signif_level, verbose, test, estDAG));
    return rcpp_result_gen;
END_RCPP
}
// popCML
List popCML(NumericMatrix true_dag, NumericVector targets, NumericVector nodes_interest, StringVector names, int lmax, bool verbose);
RcppExport SEXP _CML_popCML(SEXP true_dagSEXP, SEXP targetsSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP lmaxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(popCML(true_dag, targets, nodes_interest, names, lmax, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sampleCML_mag
List sampleCML_mag(NumericMatrix true_dag, arma::mat df, NumericVector targets, NumericVector nodes_interest, StringVector names, int lmax, double signif_level, bool verbose, std::string test, bool estDAG);
RcppExport SEXP _CML_sampleCML_mag(SEXP true_dagSEXP, SEXP dfSEXP, SEXP targetsSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP lmaxSEXP, SEXP signif_levelSEXP, SEXP verboseSEXP, SEXP testSEXP, SEXP estDAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< double >::type signif_level(signif_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string >::type test(testSEXP);
    Rcpp::traits::input_parameter< bool >::type estDAG(estDAGSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleCML_mag(true_dag, df, targets, nodes_interest, names, lmax, signif_level, verbose, test, estDAG));
    return rcpp_result_gen;
END_RCPP
}
// popCML_mag
List popCML_mag(NumericMatrix true_dag, NumericVector targets, NumericVector nodes_interest, StringVector names, int lmax, bool verbose);
RcppExport SEXP _CML_popCML_mag(SEXP true_dagSEXP, SEXP targetsSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP lmaxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(popCML_mag(true_dag, targets, nodes_interest, names, lmax, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sampleSNL
List sampleSNL(NumericMatrix true_dag, arma::mat df, NumericVector targets, NumericVector nodes_interest, StringVector names, int lmax, double signif_level, bool verbose, std::string test, bool estDAG);
RcppExport SEXP _CML_sampleSNL(SEXP true_dagSEXP, SEXP dfSEXP, SEXP targetsSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP lmaxSEXP, SEXP signif_levelSEXP, SEXP verboseSEXP, SEXP testSEXP, SEXP estDAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< double >::type signif_level(signif_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string >::type test(testSEXP);
    Rcpp::traits::input_parameter< bool >::type estDAG(estDAGSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleSNL(true_dag, df, targets, nodes_interest, names, lmax, signif_level, verbose, test, estDAG));
    return rcpp_result_gen;
END_RCPP
}
// popSNL
List popSNL(NumericMatrix true_dag, NumericVector targets, NumericVector nodes_interest, StringVector names, int lmax, bool verbose);
RcppExport SEXP _CML_popSNL(SEXP true_dagSEXP, SEXP targetsSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP lmaxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type lmax(lmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(popSNL(true_dag, targets, nodes_interest, names, lmax, verbose));
    return rcpp_result_gen;
END_RCPP
}
// getEdgeNumber
int getEdgeNumber(NumericMatrix G);
RcppExport SEXP _CML_getEdgeNumber(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(getEdgeNumber(G));
    return rcpp_result_gen;
END_RCPP
}
// sharedNeighborhood
bool sharedNeighborhood(NumericMatrix reference, NumericVector targets, int i, int j, bool verbose);
RcppExport SEXP _CML_sharedNeighborhood(SEXP referenceSEXP, SEXP targetsSEXP, SEXP iSEXP, SEXP jSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sharedNeighborhood(reference, targets, i, j, verbose));
    return rcpp_result_gen;
END_RCPP
}
// inTargetNeighborhood
bool inTargetNeighborhood(NumericMatrix reference, NumericVector targets, int i, bool verbose);
RcppExport SEXP _CML_inTargetNeighborhood(SEXP referenceSEXP, SEXP targetsSEXP, SEXP iSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(inTargetNeighborhood(reference, targets, i, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compareSkeletons
List compareSkeletons(NumericMatrix est, NumericMatrix truth, bool verbose);
RcppExport SEXP _CML_compareSkeletons(SEXP estSEXP, SEXP truthSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type est(estSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type truth(truthSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compareSkeletons(est, truth, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compareVStructures
List compareVStructures(NumericMatrix est, NumericMatrix truth, bool verbose);
RcppExport SEXP _CML_compareVStructures(SEXP estSEXP, SEXP truthSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type est(estSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type truth(truthSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(compareVStructures(est, truth, verbose));
    return rcpp_result_gen;
END_RCPP
}
// parentRecoveryAccuracy
List parentRecoveryAccuracy(NumericMatrix est, NumericMatrix truth, NumericVector targets, bool verbose);
RcppExport SEXP _CML_parentRecoveryAccuracy(SEXP estSEXP, SEXP truthSEXP, SEXP targetsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type est(estSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type truth(truthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(parentRecoveryAccuracy(est, truth, targets, verbose));
    return rcpp_result_gen;
END_RCPP
}
// interNeighborhoodEdgeMetrics
List interNeighborhoodEdgeMetrics(NumericMatrix est, NumericMatrix reference, NumericMatrix true_dag, NumericVector nbhd, bool verbose);
RcppExport SEXP _CML_interNeighborhoodEdgeMetrics(SEXP estSEXP, SEXP referenceSEXP, SEXP true_dagSEXP, SEXP nbhdSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type est(estSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nbhd(nbhdSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(interNeighborhoodEdgeMetrics(est, reference, true_dag, nbhd, verbose));
    return rcpp_result_gen;
END_RCPP
}
// overallF1
double overallF1(NumericMatrix est, NumericMatrix ref, NumericVector targets, bool verbose);
RcppExport SEXP _CML_overallF1(SEXP estSEXP, SEXP refSEXP, SEXP targetsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type est(estSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ref(refSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(overallF1(est, ref, targets, verbose));
    return rcpp_result_gen;
END_RCPP
}
// allMetrics
DataFrame allMetrics(NumericMatrix est, NumericMatrix ref_graph, NumericVector targets, NumericMatrix true_dag, NumericVector nbhd, bool verbose, std::string algo, std::string which_nodes);
RcppExport SEXP _CML_allMetrics(SEXP estSEXP, SEXP ref_graphSEXP, SEXP targetsSEXP, SEXP true_dagSEXP, SEXP nbhdSEXP, SEXP verboseSEXP, SEXP algoSEXP, SEXP which_nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type est(estSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ref_graph(ref_graphSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type true_dag(true_dagSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nbhd(nbhdSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< std::string >::type which_nodes(which_nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(allMetrics(est, ref_graph, targets, true_dag, nbhd, verbose, algo, which_nodes));
    return rcpp_result_gen;
END_RCPP
}
// getNeighborhoodMetrics
DataFrame getNeighborhoodMetrics(NumericMatrix G);
RcppExport SEXP _CML_getNeighborhoodMetrics(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(getNeighborhoodMetrics(G));
    return rcpp_result_gen;
END_RCPP
}
// validateTargetSNL
void validateTargetSNL(NumericVector targets, const size_t& t);
RcppExport SEXP _CML_validateTargetSNL(SEXP targetsSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type t(tSEXP);
    validateTargetSNL(targets, t);
    return R_NilValue;
END_RCPP
}
// combn_cpp
NumericMatrix combn_cpp(NumericVector x, size_t l);
RcppExport SEXP _CML_combn_cpp(SEXP xSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(combn_cpp(x, l));
    return rcpp_result_gen;
END_RCPP
}
// isMember
bool isMember(NumericVector x, const size_t& i);
RcppExport SEXP _CML_isMember(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(isMember(x, i));
    return rcpp_result_gen;
END_RCPP
}
// getPartialCorrelation
double getPartialCorrelation(arma::mat C, size_t i, size_t j, arma::uvec k);
RcppExport SEXP _CML_getPartialCorrelation(SEXP CSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(getPartialCorrelation(C, i, j, k));
    return rcpp_result_gen;
END_RCPP
}
// fisherZ
double fisherZ(double pc, size_t n, size_t k_size);
RcppExport SEXP _CML_fisherZ(SEXP pcSEXP, SEXP nSEXP, SEXP k_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< size_t >::type k_size(k_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(fisherZ(pc, n, k_size));
    return rcpp_result_gen;
END_RCPP
}
// condIndTest
List condIndTest(arma::mat& C, const size_t& i, const size_t& j, const arma::uvec& k, const size_t& n, const double& signif_level);
RcppExport SEXP _CML_condIndTest(SEXP CSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP, SEXP nSEXP, SEXP signif_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type signif_level(signif_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(condIndTest(C, i, j, k, n, signif_level));
    return rcpp_result_gen;
END_RCPP
}
// condIndTestPop
List condIndTestPop(NumericMatrix G, const size_t& i, const size_t& j, const arma::uvec& k);
RcppExport SEXP _CML_condIndTestPop(SEXP GSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(condIndTestPop(G, i, j, k));
    return rcpp_result_gen;
END_RCPP
}
// matrix_to_string
arma::vec matrix_to_string(arma::mat sep_vectors);
RcppExport SEXP _CML_matrix_to_string(SEXP sep_vectorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sep_vectors(sep_vectorsSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_to_string(sep_vectors));
    return rcpp_result_gen;
END_RCPP
}
// get_G2_one
double get_G2_one(arma::vec A, arma::vec B, int tot_Au_size, int tot_Bu_size);
RcppExport SEXP _CML_get_G2_one(SEXP ASEXP, SEXP BSEXP, SEXP tot_Au_sizeSEXP, SEXP tot_Bu_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type tot_Au_size(tot_Au_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type tot_Bu_size(tot_Bu_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_G2_one(A, B, tot_Au_size, tot_Bu_size));
    return rcpp_result_gen;
END_RCPP
}
// get_G2_all
double get_G2_all(arma::vec A, arma::vec B, arma::vec S);
RcppExport SEXP _CML_get_G2_all(SEXP ASEXP, SEXP BSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(get_G2_all(A, B, S));
    return rcpp_result_gen;
END_RCPP
}
// condInttestdis
List condInttestdis(arma::mat df, const size_t& i, const size_t& j, const arma::uvec& k, const double& signif_level);
RcppExport SEXP _CML_condInttestdis(SEXP dfSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP, SEXP signif_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type i(iSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type signif_level(signif_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(condInttestdis(df, i, j, k, signif_level));
    return rcpp_result_gen;
END_RCPP
}
// initializeCML
void initializeCML(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_initializeCML(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    initializeCML(td, df, t, nodes_interest, names);
    return R_NilValue;
END_RCPP
}
// initializeCMLPop
void initializeCMLPop(NumericMatrix td, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_initializeCMLPop(SEXP tdSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    initializeCMLPop(td, t, nodes_interest, names);
    return R_NilValue;
END_RCPP
}
// getSizeCML
int getSizeCML(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_getSizeCML(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(getSizeCML(td, df, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// setSCML
List setSCML(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names, size_t i, size_t j, NumericVector k);
RcppExport SEXP _CML_setSCML(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(setSCML(td, df, t, nodes_interest, names, i, j, k));
    return rcpp_result_gen;
END_RCPP
}
// setVerboseCML
void setVerboseCML(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_setVerboseCML(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    setVerboseCML(td, df, t, nodes_interest, names);
    return R_NilValue;
END_RCPP
}
// checkSkeletonTotal
NumericMatrix checkSkeletonTotal(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkSkeletonTotal(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSkeletonTotal(td, df, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkSkeletonTotalPop
NumericMatrix checkSkeletonTotalPop(NumericMatrix td, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkSkeletonTotalPop(SEXP tdSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSkeletonTotalPop(td, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkVStruct
NumericMatrix checkVStruct(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkVStruct(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkVStruct(td, df, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkVStructPop
NumericMatrix checkVStructPop(NumericMatrix td, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkVStructPop(SEXP tdSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkVStructPop(td, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkAdjMatConversion
NumericMatrix checkAdjMatConversion(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names, NumericMatrix m, NumericVector neighbors);
RcppExport SEXP _CML_checkAdjMatConversion(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP mSEXP, SEXP neighborsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    rcpp_result_gen = Rcpp::wrap(checkAdjMatConversion(td, df, t, nodes_interest, names, m, neighbors));
    return rcpp_result_gen;
END_RCPP
}
// checkNotationWarnings
NumericMatrix checkNotationWarnings(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names, NumericMatrix m);
RcppExport SEXP _CML_checkNotationWarnings(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(checkNotationWarnings(td, df, t, nodes_interest, names, m));
    return rcpp_result_gen;
END_RCPP
}
// checkSeparationTest
double checkSeparationTest(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names, int i, int j, int l, NumericVector nodes_to_skip);
RcppExport SEXP _CML_checkSeparationTest(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP, SEXP iSEXP, SEXP jSEXP, SEXP lSEXP, SEXP nodes_to_skipSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_to_skip(nodes_to_skipSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSeparationTest(td, df, t, nodes_interest, names, i, j, l, nodes_to_skip));
    return rcpp_result_gen;
END_RCPP
}
// checkCMLSummary
NumericMatrix checkCMLSummary(NumericMatrix td, arma::mat df, NumericVector targets, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkCMLSummary(SEXP tdSEXP, SEXP dfSEXP, SEXP targetsSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkCMLSummary(td, df, targets, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkCMLSummaryPop
NumericMatrix checkCMLSummaryPop(NumericMatrix td, NumericVector targets, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkCMLSummaryPop(SEXP tdSEXP, SEXP targetsSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkCMLSummaryPop(td, targets, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// testArmaCor
arma::mat testArmaCor(arma::mat M);
RcppExport SEXP _CML_testArmaCor(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(testArmaCor(M));
    return rcpp_result_gen;
END_RCPP
}
// check_amat_works
NumericMatrix check_amat_works(int nodes, StringVector node_names, NumericMatrix adj);
RcppExport SEXP _CML_check_amat_works(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(check_amat_works(nodes, node_names, adj));
    return rcpp_result_gen;
END_RCPP
}
// check_amat_works_onepar
NumericMatrix check_amat_works_onepar(int nodes);
RcppExport SEXP _CML_check_amat_works_onepar(SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(check_amat_works_onepar(nodes));
    return rcpp_result_gen;
END_RCPP
}
// check_names_works
StringVector check_names_works(int nodes, StringVector node_names, NumericMatrix adj);
RcppExport SEXP _CML_check_names_works(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(check_names_works(nodes, node_names, adj));
    return rcpp_result_gen;
END_RCPP
}
// check_dag_object
List check_dag_object(int nodes, StringVector node_names, NumericMatrix adj, bool v);
RcppExport SEXP _CML_check_dag_object(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< bool >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(check_dag_object(nodes, node_names, adj, v));
    return rcpp_result_gen;
END_RCPP
}
// check_pdag_object
List check_pdag_object(int nodes, StringVector node_names, NumericMatrix adj, bool v);
RcppExport SEXP _CML_check_pdag_object(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< bool >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(check_pdag_object(nodes, node_names, adj, v));
    return rcpp_result_gen;
END_RCPP
}
// check_dag_object2
void check_dag_object2(int nodes);
RcppExport SEXP _CML_check_dag_object2(SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    check_dag_object2(nodes);
    return R_NilValue;
END_RCPP
}
// check_pdag_object2
void check_pdag_object2(int nodes);
RcppExport SEXP _CML_check_pdag_object2(SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    check_pdag_object2(nodes);
    return R_NilValue;
END_RCPP
}
// check_neighbors_retrieval
NumericVector check_neighbors_retrieval(int nodes, StringVector node_names, NumericMatrix adj, int t, bool v);
RcppExport SEXP _CML_check_neighbors_retrieval(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP tSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(check_neighbors_retrieval(nodes, node_names, adj, t, v));
    return rcpp_result_gen;
END_RCPP
}
// check_neighbors_retrieval_multi
NumericVector check_neighbors_retrieval_multi(int nodes, StringVector node_names, NumericMatrix adj, NumericVector t, bool v);
RcppExport SEXP _CML_check_neighbors_retrieval_multi(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP tSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(check_neighbors_retrieval_multi(nodes, node_names, adj, t, v));
    return rcpp_result_gen;
END_RCPP
}
// check_pdag_neighbors_retrieval
NumericVector check_pdag_neighbors_retrieval(int nodes, StringVector node_names, NumericMatrix adj, int t, bool v);
RcppExport SEXP _CML_check_pdag_neighbors_retrieval(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP tSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< bool >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(check_pdag_neighbors_retrieval(nodes, node_names, adj, t, v));
    return rcpp_result_gen;
END_RCPP
}
// check_amat_retrieval
int check_amat_retrieval(int nodes, StringVector node_names, NumericMatrix adj, int i, int j);
RcppExport SEXP _CML_check_amat_retrieval(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(check_amat_retrieval(nodes, node_names, adj, i, j));
    return rcpp_result_gen;
END_RCPP
}
// check_amat_retrieval_function
int check_amat_retrieval_function(int nodes, StringVector node_names, NumericMatrix adj, int i, int j);
RcppExport SEXP _CML_check_amat_retrieval_function(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(check_amat_retrieval_function(nodes, node_names, adj, i, j));
    return rcpp_result_gen;
END_RCPP
}
// check_amat_row_retrieval
NumericVector check_amat_row_retrieval(int nodes, StringVector node_names, NumericMatrix adj, int i);
RcppExport SEXP _CML_check_amat_row_retrieval(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(check_amat_row_retrieval(nodes, node_names, adj, i));
    return rcpp_result_gen;
END_RCPP
}
// check_amat_col_retrieval
NumericVector check_amat_col_retrieval(int nodes, StringVector node_names, NumericMatrix adj, int j);
RcppExport SEXP _CML_check_amat_col_retrieval(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(check_amat_col_retrieval(nodes, node_names, adj, j));
    return rcpp_result_gen;
END_RCPP
}
// check_adjacent_non_adjacent
List check_adjacent_non_adjacent(int nodes, StringVector node_names, NumericMatrix adj, int i);
RcppExport SEXP _CML_check_adjacent_non_adjacent(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(check_adjacent_non_adjacent(nodes, node_names, adj, i));
    return rcpp_result_gen;
END_RCPP
}
// check_non_adjacent_solo
NumericVector check_non_adjacent_solo(int nodes, StringVector node_names, NumericMatrix adj, int i);
RcppExport SEXP _CML_check_non_adjacent_solo(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(check_non_adjacent_solo(nodes, node_names, adj, i));
    return rcpp_result_gen;
END_RCPP
}
// check_directed_undirected
List check_directed_undirected(int nodes, StringVector node_names, NumericMatrix adj, int i, int j);
RcppExport SEXP _CML_check_directed_undirected(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(check_directed_undirected(nodes, node_names, adj, i, j));
    return rcpp_result_gen;
END_RCPP
}
// check_sizes
List check_sizes(int nodes, StringVector node_names, NumericMatrix adj);
RcppExport SEXP _CML_check_sizes(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(check_sizes(nodes, node_names, adj));
    return rcpp_result_gen;
END_RCPP
}
// check_amat_setval
int check_amat_setval(int nodes, StringVector node_names, NumericMatrix adj, int i, int j, int val);
RcppExport SEXP _CML_check_amat_setval(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP, SEXP jSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(check_amat_setval(nodes, node_names, adj, i, j, val));
    return rcpp_result_gen;
END_RCPP
}
// check_amat_setval_function
int check_amat_setval_function(int nodes, StringVector node_names, NumericMatrix adj, int i, int j, int val);
RcppExport SEXP _CML_check_amat_setval_function(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP, SEXP jSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(check_amat_setval_function(nodes, node_names, adj, i, j, val));
    return rcpp_result_gen;
END_RCPP
}
// checkIfAdjacent
bool checkIfAdjacent(int nodes, StringVector node_names, NumericMatrix adj, int i, int j);
RcppExport SEXP _CML_checkIfAdjacent(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(checkIfAdjacent(nodes, node_names, adj, i, j));
    return rcpp_result_gen;
END_RCPP
}
// checkEmptyGraph
NumericMatrix checkEmptyGraph(int p);
RcppExport SEXP _CML_checkEmptyGraph(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(checkEmptyGraph(p));
    return rcpp_result_gen;
END_RCPP
}
// checkAcyclicity
bool checkAcyclicity(int nodes, StringVector node_names, NumericMatrix adj);
RcppExport SEXP _CML_checkAcyclicity(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(checkAcyclicity(nodes, node_names, adj));
    return rcpp_result_gen;
END_RCPP
}
// checkIsAncestor
bool checkIsAncestor(int nodes, StringVector node_names, NumericMatrix adj, int desc, int anc, bool verbose);
RcppExport SEXP _CML_checkIsAncestor(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP descSEXP, SEXP ancSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type desc(descSEXP);
    Rcpp::traits::input_parameter< int >::type anc(ancSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(checkIsAncestor(nodes, node_names, adj, desc, anc, verbose));
    return rcpp_result_gen;
END_RCPP
}
// checkInNeighborhood
bool checkInNeighborhood(int nodes, StringVector node_names, NumericMatrix adj, int i, int j, bool verbose);
RcppExport SEXP _CML_checkInNeighborhood(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP, SEXP jSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(checkInNeighborhood(nodes, node_names, adj, i, j, verbose));
    return rcpp_result_gen;
END_RCPP
}
// check_pdag_inNeighborhood
bool check_pdag_inNeighborhood(int nodes, StringVector node_names, NumericMatrix adj, int i, int j, bool verbose);
RcppExport SEXP _CML_check_pdag_inNeighborhood(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP, SEXP jSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(check_pdag_inNeighborhood(nodes, node_names, adj, i, j, verbose));
    return rcpp_result_gen;
END_RCPP
}
// check_set_amat
NumericMatrix check_set_amat(int nodes, StringVector node_names, NumericMatrix adj);
RcppExport SEXP _CML_check_set_amat(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(check_set_amat(nodes, node_names, adj));
    return rcpp_result_gen;
END_RCPP
}
// check_disc_path
NumericVector check_disc_path(int nodes, StringVector node_names, NumericMatrix adj, size_t c, size_t d, size_t e);
RcppExport SEXP _CML_check_disc_path(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP cSEXP, SEXP dSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< size_t >::type c(cSEXP);
    Rcpp::traits::input_parameter< size_t >::type d(dSEXP);
    Rcpp::traits::input_parameter< size_t >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(check_disc_path(nodes, node_names, adj, c, d, e));
    return rcpp_result_gen;
END_RCPP
}
// check_upd_path
NumericVector check_upd_path(int nodes, StringVector node_names, NumericMatrix adj, size_t a, size_t b, size_t e);
RcppExport SEXP _CML_check_upd_path(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP aSEXP, SEXP bSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< size_t >::type a(aSEXP);
    Rcpp::traits::input_parameter< size_t >::type b(bSEXP);
    Rcpp::traits::input_parameter< size_t >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(check_upd_path(nodes, node_names, adj, a, b, e));
    return rcpp_result_gen;
END_RCPP
}
// test_checkWronglyCovered
void test_checkWronglyCovered(int nodes, StringVector node_names, NumericMatrix adj, NumericVector p);
RcppExport SEXP _CML_test_checkWronglyCovered(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    test_checkWronglyCovered(nodes, node_names, adj, p);
    return R_NilValue;
END_RCPP
}
// checkNeighborhoodId
List checkNeighborhoodId(int nodes, StringVector node_names, NumericMatrix adj, int i, bool verbose);
RcppExport SEXP _CML_checkNeighborhoodId(SEXP nodesSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP iSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(checkNeighborhoodId(nodes, node_names, adj, i, verbose));
    return rcpp_result_gen;
END_RCPP
}
// testInitializeMBList
void testInitializeMBList(NumericVector nodes, NumericMatrix mb_mat);
RcppExport SEXP _CML_testInitializeMBList(SEXP nodesSEXP, SEXP mb_matSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mb_mat(mb_matSEXP);
    testInitializeMBList(nodes, mb_mat);
    return R_NilValue;
END_RCPP
}
// testInitializeMBListPop
void testInitializeMBListPop(NumericVector nodes, NumericMatrix amat);
RcppExport SEXP _CML_testInitializeMBListPop(SEXP nodesSEXP, SEXP amatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type amat(amatSEXP);
    testInitializeMBListPop(nodes, amat);
    return R_NilValue;
END_RCPP
}
// testAccessMB
NumericVector testAccessMB(NumericVector nodes, NumericMatrix mb_mat, size_t i);
RcppExport SEXP _CML_testAccessMB(SEXP nodesSEXP, SEXP mb_matSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mb_mat(mb_matSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(testAccessMB(nodes, mb_mat, i));
    return rcpp_result_gen;
END_RCPP
}
// testAccessMultipleMB
NumericVector testAccessMultipleMB(NumericVector nodes, NumericMatrix mb_mat, NumericVector v, bool include_targets, bool exclude_targets, bool verbose);
RcppExport SEXP _CML_testAccessMultipleMB(SEXP nodesSEXP, SEXP mb_matSEXP, SEXP vSEXP, SEXP include_targetsSEXP, SEXP exclude_targetsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mb_mat(mb_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type include_targets(include_targetsSEXP);
    Rcpp::traits::input_parameter< bool >::type exclude_targets(exclude_targetsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(testAccessMultipleMB(nodes, mb_mat, v, include_targets, exclude_targets, verbose));
    return rcpp_result_gen;
END_RCPP
}
// testIsMBMember
bool testIsMBMember(NumericVector nodes, NumericMatrix mb_mat, size_t target, size_t i);
RcppExport SEXP _CML_testIsMBMember(SEXP nodesSEXP, SEXP mb_matSEXP, SEXP targetSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mb_mat(mb_matSEXP);
    Rcpp::traits::input_parameter< size_t >::type target(targetSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(testIsMBMember(nodes, mb_mat, target, i));
    return rcpp_result_gen;
END_RCPP
}
// testSilencer
void testSilencer(NumericVector nodes, NumericMatrix mb_mat, double target, double i);
RcppExport SEXP _CML_testSilencer(SEXP nodesSEXP, SEXP mb_matSEXP, SEXP targetSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mb_mat(mb_matSEXP);
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type i(iSEXP);
    testSilencer(nodes, mb_mat, target, i);
    return R_NilValue;
END_RCPP
}
// test_union
NumericVector test_union(NumericVector x, NumericVector y);
RcppExport SEXP _CML_test_union(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(test_union(x, y));
    return rcpp_result_gen;
END_RCPP
}
// test_sort
NumericVector test_sort(NumericVector x);
RcppExport SEXP _CML_test_sort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_sort(x));
    return rcpp_result_gen;
END_RCPP
}
// test_fill
NumericVector test_fill(int nrow, int ncol, int value);
RcppExport SEXP _CML_test_fill(SEXP nrowSEXP, SEXP ncolSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fill(nrow, ncol, value));
    return rcpp_result_gen;
END_RCPP
}
// test_fill_diag
NumericMatrix test_fill_diag(NumericMatrix x, int value);
RcppExport SEXP _CML_test_fill_diag(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fill_diag(x, value));
    return rcpp_result_gen;
END_RCPP
}
// test_create
NumericVector test_create(double x1, double x2);
RcppExport SEXP _CML_test_create(SEXP x1SEXP, SEXP x2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< double >::type x2(x2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_create(x1, x2));
    return rcpp_result_gen;
END_RCPP
}
// test_setdiff
NumericVector test_setdiff(NumericVector v1, NumericVector v2);
RcppExport SEXP _CML_test_setdiff(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_setdiff(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// test_intersect
NumericVector test_intersect(NumericVector v1, NumericVector v2);
RcppExport SEXP _CML_test_intersect(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_intersect(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// test_map_insert
std::map<int,int> test_map_insert(IntegerVector v1, IntegerVector v2);
RcppExport SEXP _CML_test_map_insert(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_map_insert(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// test_map_find
void test_map_find(IntegerVector v1, IntegerVector v2, int a);
RcppExport SEXP _CML_test_map_find(SEXP v1SEXP, SEXP v2SEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    test_map_find(v1, v2, a);
    return R_NilValue;
END_RCPP
}
// test_sep_arma
arma::uvec test_sep_arma();
RcppExport SEXP _CML_test_sep_arma() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_sep_arma());
    return rcpp_result_gen;
END_RCPP
}
// test_subset_mat
arma::mat test_subset_mat(arma::mat m, NumericVector i);
RcppExport SEXP _CML_test_subset_mat(SEXP mSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(test_subset_mat(m, i));
    return rcpp_result_gen;
END_RCPP
}
// test_NumMat_value
NumericMatrix test_NumMat_value(NumericMatrix G);
RcppExport SEXP _CML_test_NumMat_value(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(test_NumMat_value(G));
    return rcpp_result_gen;
END_RCPP
}
// test_decrement_matrix
void test_decrement_matrix(NumericMatrix& G);
RcppExport SEXP _CML_test_decrement_matrix(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type G(GSEXP);
    test_decrement_matrix(G);
    return R_NilValue;
END_RCPP
}
// testRule1
NumericMatrix testRule1(NumericMatrix td, arma::mat dummy_df, NumericVector dummy_t, StringVector names, NumericMatrix m);
RcppExport SEXP _CML_testRule1(SEXP tdSEXP, SEXP dummy_dfSEXP, SEXP dummy_tSEXP, SEXP namesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dummy_df(dummy_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dummy_t(dummy_tSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(testRule1(td, dummy_df, dummy_t, names, m));
    return rcpp_result_gen;
END_RCPP
}
// testRule2
NumericMatrix testRule2(NumericMatrix td, arma::mat dummy_df, NumericVector dummy_t, StringVector names, NumericMatrix m);
RcppExport SEXP _CML_testRule2(SEXP tdSEXP, SEXP dummy_dfSEXP, SEXP dummy_tSEXP, SEXP namesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dummy_df(dummy_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dummy_t(dummy_tSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(testRule2(td, dummy_df, dummy_t, names, m));
    return rcpp_result_gen;
END_RCPP
}
// testRule3
NumericMatrix testRule3(NumericMatrix td, arma::mat dummy_df, NumericVector dummy_t, StringVector names, NumericMatrix m);
RcppExport SEXP _CML_testRule3(SEXP tdSEXP, SEXP dummy_dfSEXP, SEXP dummy_tSEXP, SEXP namesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dummy_df(dummy_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dummy_t(dummy_tSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(testRule3(td, dummy_df, dummy_t, names, m));
    return rcpp_result_gen;
END_RCPP
}
// testRule4
NumericMatrix testRule4(NumericMatrix td, arma::mat dummy_df, NumericVector dummy_t, StringVector names, NumericMatrix m, int i, int j, NumericVector k);
RcppExport SEXP _CML_testRule4(SEXP tdSEXP, SEXP dummy_dfSEXP, SEXP dummy_tSEXP, SEXP namesSEXP, SEXP mSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dummy_df(dummy_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dummy_t(dummy_tSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(testRule4(td, dummy_df, dummy_t, names, m, i, j, k));
    return rcpp_result_gen;
END_RCPP
}
// testRule8
NumericMatrix testRule8(NumericMatrix td, arma::mat dummy_df, NumericVector dummy_t, StringVector names, NumericMatrix m);
RcppExport SEXP _CML_testRule8(SEXP tdSEXP, SEXP dummy_dfSEXP, SEXP dummy_tSEXP, SEXP namesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dummy_df(dummy_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dummy_t(dummy_tSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(testRule8(td, dummy_df, dummy_t, names, m));
    return rcpp_result_gen;
END_RCPP
}
// testRule9
NumericMatrix testRule9(NumericMatrix td, arma::mat dummy_df, NumericVector dummy_t, StringVector names, NumericMatrix m);
RcppExport SEXP _CML_testRule9(SEXP tdSEXP, SEXP dummy_dfSEXP, SEXP dummy_tSEXP, SEXP namesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dummy_df(dummy_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dummy_t(dummy_tSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(testRule9(td, dummy_df, dummy_t, names, m));
    return rcpp_result_gen;
END_RCPP
}
// testRule10
NumericMatrix testRule10(NumericMatrix td, arma::mat dummy_df, NumericVector dummy_t, StringVector names, NumericMatrix m);
RcppExport SEXP _CML_testRule10(SEXP tdSEXP, SEXP dummy_dfSEXP, SEXP dummy_tSEXP, SEXP namesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dummy_df(dummy_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dummy_t(dummy_tSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(testRule10(td, dummy_df, dummy_t, names, m));
    return rcpp_result_gen;
END_RCPP
}
// testAllRules
NumericMatrix testAllRules(NumericMatrix td, arma::mat dummy_df, NumericVector dummy_t, StringVector names, NumericMatrix m);
RcppExport SEXP _CML_testAllRules(SEXP tdSEXP, SEXP dummy_dfSEXP, SEXP dummy_tSEXP, SEXP namesSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dummy_df(dummy_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dummy_t(dummy_tSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(testAllRules(td, dummy_df, dummy_t, names, m));
    return rcpp_result_gen;
END_RCPP
}
// testConvertMixed
NumericMatrix testConvertMixed(NumericMatrix td, NumericVector t, StringVector names, NumericMatrix m, NumericVector v);
RcppExport SEXP _CML_testConvertMixed(SEXP tdSEXP, SEXP tSEXP, SEXP namesSEXP, SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(testConvertMixed(td, t, names, m, v));
    return rcpp_result_gen;
END_RCPP
}
// checkInitializeSNL
int checkInitializeSNL(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkInitializeSNL(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkInitializeSNL(td, df, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkGetTargetSkel
NumericMatrix checkGetTargetSkel(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkGetTargetSkel(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkGetTargetSkel(td, df, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkGetVStructures
NumericMatrix checkGetVStructures(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkGetVStructures(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkGetVStructures(td, df, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkInitializeSNLPop
int checkInitializeSNLPop(NumericMatrix td, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkInitializeSNLPop(SEXP tdSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkInitializeSNLPop(td, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkGetTargetSkelPop
NumericMatrix checkGetTargetSkelPop(NumericMatrix td, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkGetTargetSkelPop(SEXP tdSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkGetTargetSkelPop(td, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkGetVStructuresPop
NumericMatrix checkGetVStructuresPop(NumericMatrix td, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkGetVStructuresPop(SEXP tdSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkGetVStructuresPop(td, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkRule1
NumericMatrix checkRule1(NumericMatrix td, NumericMatrix test_mat, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkRule1(SEXP tdSEXP, SEXP test_matSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_mat(test_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkRule1(td, test_mat, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkRule2
NumericMatrix checkRule2(NumericMatrix td, NumericMatrix test_mat, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkRule2(SEXP tdSEXP, SEXP test_matSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_mat(test_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkRule2(td, test_mat, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkRule3
NumericMatrix checkRule3(NumericMatrix td, NumericMatrix test_mat, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkRule3(SEXP tdSEXP, SEXP test_matSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_mat(test_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkRule3(td, test_mat, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkRule4
NumericMatrix checkRule4(NumericMatrix td, NumericMatrix test_mat, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkRule4(SEXP tdSEXP, SEXP test_matSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_mat(test_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkRule4(td, test_mat, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkSNLRules
NumericMatrix checkSNLRules(NumericMatrix td, NumericMatrix test_mat, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkSNLRules(SEXP tdSEXP, SEXP test_matSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test_mat(test_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSNLRules(td, test_mat, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkSNL
NumericMatrix checkSNL(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkSNL(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSNL(td, df, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkSNLRun
NumericMatrix checkSNLRun(NumericMatrix td, arma::mat df, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkSNLRun(SEXP tdSEXP, SEXP dfSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type df(dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSNLRun(td, df, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// checkSNLPop
NumericMatrix checkSNLPop(NumericMatrix td, NumericVector t, NumericVector nodes_interest, StringVector names);
RcppExport SEXP _CML_checkSNLPop(SEXP tdSEXP, SEXP tSEXP, SEXP nodes_interestSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type td(tdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodes_interest(nodes_interestSEXP);
    Rcpp::traits::input_parameter< StringVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSNLPop(td, t, nodes_interest, names));
    return rcpp_result_gen;
END_RCPP
}
// getNbhd
NumericVector getNbhd(int p, StringVector node_names, NumericMatrix adj, NumericVector targets, bool verbose);
RcppExport SEXP _CML_getNbhd(SEXP pSEXP, SEXP node_namesSEXP, SEXP adjSEXP, SEXP targetsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< StringVector >::type node_names(node_namesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(getNbhd(p, node_names, adj, targets, verbose));
    return rcpp_result_gen;
END_RCPP
}
// printS
void printS(NumericVector neighbors);
RcppExport SEXP _CML_printS(SEXP neighborsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    printS(neighbors);
    return R_NilValue;
END_RCPP
}
// getInitialValues
NumericVector getInitialValues(NumericVector neighbors, int i, int j);
RcppExport SEXP _CML_getInitialValues(SEXP neighborsSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(getInitialValues(neighbors, i, j));
    return rcpp_result_gen;
END_RCPP
}
// setListEmptySet
NumericVector setListEmptySet(NumericVector neighbors, int i, int j);
RcppExport SEXP _CML_setListEmptySet(SEXP neighborsSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(setListEmptySet(neighbors, i, j));
    return rcpp_result_gen;
END_RCPP
}
// setListEfficient
NumericVector setListEfficient(NumericVector neighbors, int i, int j, NumericVector kvals);
RcppExport SEXP _CML_setListEfficient(SEXP neighborsSEXP, SEXP iSEXP, SEXP jSEXP, SEXP kvalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kvals(kvalsSEXP);
    rcpp_result_gen = Rcpp::wrap(setListEfficient(neighbors, i, j, kvals));
    return rcpp_result_gen;
END_RCPP
}
// checkSeparationFunc
bool checkSeparationFunc(NumericVector neighbors, int i, int j, NumericVector sep, int val_to_check);
RcppExport SEXP _CML_checkSeparationFunc(SEXP neighborsSEXP, SEXP iSEXP, SEXP jSEXP, SEXP sepSEXP, SEXP val_to_checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sep(sepSEXP);
    Rcpp::traits::input_parameter< int >::type val_to_check(val_to_checkSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSeparationFunc(neighbors, i, j, sep, val_to_check));
    return rcpp_result_gen;
END_RCPP
}
// checkSeparationFuncCorrected
bool checkSeparationFuncCorrected(NumericVector neighbors, int i, int j, NumericVector sep, int val_to_check);
RcppExport SEXP _CML_checkSeparationFuncCorrected(SEXP neighborsSEXP, SEXP iSEXP, SEXP jSEXP, SEXP sepSEXP, SEXP val_to_checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sep(sepSEXP);
    Rcpp::traits::input_parameter< int >::type val_to_check(val_to_checkSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSeparationFuncCorrected(neighbors, i, j, sep, val_to_check));
    return rcpp_result_gen;
END_RCPP
}
// checkIsSepSetMember
bool checkIsSepSetMember(NumericVector neighbors, size_t i, size_t j, NumericVector sep1, NumericVector sep2, size_t val_to_check);
RcppExport SEXP _CML_checkIsSepSetMember(SEXP neighborsSEXP, SEXP iSEXP, SEXP jSEXP, SEXP sep1SEXP, SEXP sep2SEXP, SEXP val_to_checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sep1(sep1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sep2(sep2SEXP);
    Rcpp::traits::input_parameter< size_t >::type val_to_check(val_to_checkSEXP);
    rcpp_result_gen = Rcpp::wrap(checkIsSepSetMember(neighbors, i, j, sep1, sep2, val_to_check));
    return rcpp_result_gen;
END_RCPP
}
// checkPotentialVStruct
bool checkPotentialVStruct(NumericVector neighbors, size_t i, size_t j, NumericVector sep, size_t k);
RcppExport SEXP _CML_checkPotentialVStruct(SEXP neighborsSEXP, SEXP iSEXP, SEXP jSEXP, SEXP sepSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sep(sepSEXP);
    Rcpp::traits::input_parameter< size_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(checkPotentialVStruct(neighbors, i, j, sep, k));
    return rcpp_result_gen;
END_RCPP
}
// checkGetS
List checkGetS(NumericVector neighbors, size_t i, size_t j, NumericVector sep);
RcppExport SEXP _CML_checkGetS(SEXP neighborsSEXP, SEXP iSEXP, SEXP jSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< size_t >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sep(sepSEXP);
    rcpp_result_gen = Rcpp::wrap(checkGetS(neighbors, i, j, sep));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CML_sampleCML", (DL_FUNC) &_CML_sampleCML, 10},
    {"_CML_popCML", (DL_FUNC) &_CML_popCML, 6},
    {"_CML_sampleCML_mag", (DL_FUNC) &_CML_sampleCML_mag, 10},
    {"_CML_popCML_mag", (DL_FUNC) &_CML_popCML_mag, 6},
    {"_CML_sampleSNL", (DL_FUNC) &_CML_sampleSNL, 10},
    {"_CML_popSNL", (DL_FUNC) &_CML_popSNL, 6},
    {"_CML_getEdgeNumber", (DL_FUNC) &_CML_getEdgeNumber, 1},
    {"_CML_sharedNeighborhood", (DL_FUNC) &_CML_sharedNeighborhood, 5},
    {"_CML_inTargetNeighborhood", (DL_FUNC) &_CML_inTargetNeighborhood, 4},
    {"_CML_compareSkeletons", (DL_FUNC) &_CML_compareSkeletons, 3},
    {"_CML_compareVStructures", (DL_FUNC) &_CML_compareVStructures, 3},
    {"_CML_parentRecoveryAccuracy", (DL_FUNC) &_CML_parentRecoveryAccuracy, 4},
    {"_CML_interNeighborhoodEdgeMetrics", (DL_FUNC) &_CML_interNeighborhoodEdgeMetrics, 5},
    {"_CML_overallF1", (DL_FUNC) &_CML_overallF1, 4},
    {"_CML_allMetrics", (DL_FUNC) &_CML_allMetrics, 8},
    {"_CML_getNeighborhoodMetrics", (DL_FUNC) &_CML_getNeighborhoodMetrics, 1},
    {"_CML_validateTargetSNL", (DL_FUNC) &_CML_validateTargetSNL, 2},
    {"_CML_combn_cpp", (DL_FUNC) &_CML_combn_cpp, 2},
    {"_CML_isMember", (DL_FUNC) &_CML_isMember, 2},
    {"_CML_getPartialCorrelation", (DL_FUNC) &_CML_getPartialCorrelation, 4},
    {"_CML_fisherZ", (DL_FUNC) &_CML_fisherZ, 3},
    {"_CML_condIndTest", (DL_FUNC) &_CML_condIndTest, 6},
    {"_CML_condIndTestPop", (DL_FUNC) &_CML_condIndTestPop, 4},
    {"_CML_matrix_to_string", (DL_FUNC) &_CML_matrix_to_string, 1},
    {"_CML_get_G2_one", (DL_FUNC) &_CML_get_G2_one, 4},
    {"_CML_get_G2_all", (DL_FUNC) &_CML_get_G2_all, 3},
    {"_CML_condInttestdis", (DL_FUNC) &_CML_condInttestdis, 5},
    {"_CML_initializeCML", (DL_FUNC) &_CML_initializeCML, 5},
    {"_CML_initializeCMLPop", (DL_FUNC) &_CML_initializeCMLPop, 4},
    {"_CML_getSizeCML", (DL_FUNC) &_CML_getSizeCML, 5},
    {"_CML_setSCML", (DL_FUNC) &_CML_setSCML, 8},
    {"_CML_setVerboseCML", (DL_FUNC) &_CML_setVerboseCML, 5},
    {"_CML_checkSkeletonTotal", (DL_FUNC) &_CML_checkSkeletonTotal, 5},
    {"_CML_checkSkeletonTotalPop", (DL_FUNC) &_CML_checkSkeletonTotalPop, 4},
    {"_CML_checkVStruct", (DL_FUNC) &_CML_checkVStruct, 5},
    {"_CML_checkVStructPop", (DL_FUNC) &_CML_checkVStructPop, 4},
    {"_CML_checkAdjMatConversion", (DL_FUNC) &_CML_checkAdjMatConversion, 7},
    {"_CML_checkNotationWarnings", (DL_FUNC) &_CML_checkNotationWarnings, 6},
    {"_CML_checkSeparationTest", (DL_FUNC) &_CML_checkSeparationTest, 9},
    {"_CML_checkCMLSummary", (DL_FUNC) &_CML_checkCMLSummary, 5},
    {"_CML_checkCMLSummaryPop", (DL_FUNC) &_CML_checkCMLSummaryPop, 4},
    {"_CML_testArmaCor", (DL_FUNC) &_CML_testArmaCor, 1},
    {"_CML_check_amat_works", (DL_FUNC) &_CML_check_amat_works, 3},
    {"_CML_check_amat_works_onepar", (DL_FUNC) &_CML_check_amat_works_onepar, 1},
    {"_CML_check_names_works", (DL_FUNC) &_CML_check_names_works, 3},
    {"_CML_check_dag_object", (DL_FUNC) &_CML_check_dag_object, 4},
    {"_CML_check_pdag_object", (DL_FUNC) &_CML_check_pdag_object, 4},
    {"_CML_check_dag_object2", (DL_FUNC) &_CML_check_dag_object2, 1},
    {"_CML_check_pdag_object2", (DL_FUNC) &_CML_check_pdag_object2, 1},
    {"_CML_check_neighbors_retrieval", (DL_FUNC) &_CML_check_neighbors_retrieval, 5},
    {"_CML_check_neighbors_retrieval_multi", (DL_FUNC) &_CML_check_neighbors_retrieval_multi, 5},
    {"_CML_check_pdag_neighbors_retrieval", (DL_FUNC) &_CML_check_pdag_neighbors_retrieval, 5},
    {"_CML_check_amat_retrieval", (DL_FUNC) &_CML_check_amat_retrieval, 5},
    {"_CML_check_amat_retrieval_function", (DL_FUNC) &_CML_check_amat_retrieval_function, 5},
    {"_CML_check_amat_row_retrieval", (DL_FUNC) &_CML_check_amat_row_retrieval, 4},
    {"_CML_check_amat_col_retrieval", (DL_FUNC) &_CML_check_amat_col_retrieval, 4},
    {"_CML_check_adjacent_non_adjacent", (DL_FUNC) &_CML_check_adjacent_non_adjacent, 4},
    {"_CML_check_non_adjacent_solo", (DL_FUNC) &_CML_check_non_adjacent_solo, 4},
    {"_CML_check_directed_undirected", (DL_FUNC) &_CML_check_directed_undirected, 5},
    {"_CML_check_sizes", (DL_FUNC) &_CML_check_sizes, 3},
    {"_CML_check_amat_setval", (DL_FUNC) &_CML_check_amat_setval, 6},
    {"_CML_check_amat_setval_function", (DL_FUNC) &_CML_check_amat_setval_function, 6},
    {"_CML_checkIfAdjacent", (DL_FUNC) &_CML_checkIfAdjacent, 5},
    {"_CML_checkEmptyGraph", (DL_FUNC) &_CML_checkEmptyGraph, 1},
    {"_CML_checkAcyclicity", (DL_FUNC) &_CML_checkAcyclicity, 3},
    {"_CML_checkIsAncestor", (DL_FUNC) &_CML_checkIsAncestor, 6},
    {"_CML_checkInNeighborhood", (DL_FUNC) &_CML_checkInNeighborhood, 6},
    {"_CML_check_pdag_inNeighborhood", (DL_FUNC) &_CML_check_pdag_inNeighborhood, 6},
    {"_CML_check_set_amat", (DL_FUNC) &_CML_check_set_amat, 3},
    {"_CML_check_disc_path", (DL_FUNC) &_CML_check_disc_path, 6},
    {"_CML_check_upd_path", (DL_FUNC) &_CML_check_upd_path, 6},
    {"_CML_test_checkWronglyCovered", (DL_FUNC) &_CML_test_checkWronglyCovered, 4},
    {"_CML_checkNeighborhoodId", (DL_FUNC) &_CML_checkNeighborhoodId, 5},
    {"_CML_testInitializeMBList", (DL_FUNC) &_CML_testInitializeMBList, 2},
    {"_CML_testInitializeMBListPop", (DL_FUNC) &_CML_testInitializeMBListPop, 2},
    {"_CML_testAccessMB", (DL_FUNC) &_CML_testAccessMB, 3},
    {"_CML_testAccessMultipleMB", (DL_FUNC) &_CML_testAccessMultipleMB, 6},
    {"_CML_testIsMBMember", (DL_FUNC) &_CML_testIsMBMember, 4},
    {"_CML_testSilencer", (DL_FUNC) &_CML_testSilencer, 4},
    {"_CML_test_union", (DL_FUNC) &_CML_test_union, 2},
    {"_CML_test_sort", (DL_FUNC) &_CML_test_sort, 1},
    {"_CML_test_fill", (DL_FUNC) &_CML_test_fill, 3},
    {"_CML_test_fill_diag", (DL_FUNC) &_CML_test_fill_diag, 2},
    {"_CML_test_create", (DL_FUNC) &_CML_test_create, 2},
    {"_CML_test_setdiff", (DL_FUNC) &_CML_test_setdiff, 2},
    {"_CML_test_intersect", (DL_FUNC) &_CML_test_intersect, 2},
    {"_CML_test_map_insert", (DL_FUNC) &_CML_test_map_insert, 2},
    {"_CML_test_map_find", (DL_FUNC) &_CML_test_map_find, 3},
    {"_CML_test_sep_arma", (DL_FUNC) &_CML_test_sep_arma, 0},
    {"_CML_test_subset_mat", (DL_FUNC) &_CML_test_subset_mat, 2},
    {"_CML_test_NumMat_value", (DL_FUNC) &_CML_test_NumMat_value, 1},
    {"_CML_test_decrement_matrix", (DL_FUNC) &_CML_test_decrement_matrix, 1},
    {"_CML_testRule1", (DL_FUNC) &_CML_testRule1, 5},
    {"_CML_testRule2", (DL_FUNC) &_CML_testRule2, 5},
    {"_CML_testRule3", (DL_FUNC) &_CML_testRule3, 5},
    {"_CML_testRule4", (DL_FUNC) &_CML_testRule4, 8},
    {"_CML_testRule8", (DL_FUNC) &_CML_testRule8, 5},
    {"_CML_testRule9", (DL_FUNC) &_CML_testRule9, 5},
    {"_CML_testRule10", (DL_FUNC) &_CML_testRule10, 5},
    {"_CML_testAllRules", (DL_FUNC) &_CML_testAllRules, 5},
    {"_CML_testConvertMixed", (DL_FUNC) &_CML_testConvertMixed, 5},
    {"_CML_checkInitializeSNL", (DL_FUNC) &_CML_checkInitializeSNL, 5},
    {"_CML_checkGetTargetSkel", (DL_FUNC) &_CML_checkGetTargetSkel, 5},
    {"_CML_checkGetVStructures", (DL_FUNC) &_CML_checkGetVStructures, 5},
    {"_CML_checkInitializeSNLPop", (DL_FUNC) &_CML_checkInitializeSNLPop, 4},
    {"_CML_checkGetTargetSkelPop", (DL_FUNC) &_CML_checkGetTargetSkelPop, 4},
    {"_CML_checkGetVStructuresPop", (DL_FUNC) &_CML_checkGetVStructuresPop, 4},
    {"_CML_checkRule1", (DL_FUNC) &_CML_checkRule1, 5},
    {"_CML_checkRule2", (DL_FUNC) &_CML_checkRule2, 5},
    {"_CML_checkRule3", (DL_FUNC) &_CML_checkRule3, 5},
    {"_CML_checkRule4", (DL_FUNC) &_CML_checkRule4, 5},
    {"_CML_checkSNLRules", (DL_FUNC) &_CML_checkSNLRules, 5},
    {"_CML_checkSNL", (DL_FUNC) &_CML_checkSNL, 5},
    {"_CML_checkSNLRun", (DL_FUNC) &_CML_checkSNLRun, 5},
    {"_CML_checkSNLPop", (DL_FUNC) &_CML_checkSNLPop, 4},
    {"_CML_getNbhd", (DL_FUNC) &_CML_getNbhd, 5},
    {"_CML_printS", (DL_FUNC) &_CML_printS, 1},
    {"_CML_getInitialValues", (DL_FUNC) &_CML_getInitialValues, 3},
    {"_CML_setListEmptySet", (DL_FUNC) &_CML_setListEmptySet, 3},
    {"_CML_setListEfficient", (DL_FUNC) &_CML_setListEfficient, 4},
    {"_CML_checkSeparationFunc", (DL_FUNC) &_CML_checkSeparationFunc, 5},
    {"_CML_checkSeparationFuncCorrected", (DL_FUNC) &_CML_checkSeparationFuncCorrected, 5},
    {"_CML_checkIsSepSetMember", (DL_FUNC) &_CML_checkIsSepSetMember, 6},
    {"_CML_checkPotentialVStruct", (DL_FUNC) &_CML_checkPotentialVStruct, 5},
    {"_CML_checkGetS", (DL_FUNC) &_CML_checkGetS, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CML(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
